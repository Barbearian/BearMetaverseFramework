//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class CanSignal :  Bright.Config.BeanBase 
{
    public CanSignal(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { var __json0 = _json["value"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; Value = new byte[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { byte __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  Value[__index0++] = __v0; }   }
        PostInit();
    }

    public CanSignal(int id, string name, byte[] value ) 
    {
        this.Id = id;
        this.Name = name;
        this.Value = value;
        PostInit();
    }

    public static CanSignal DeserializeCanSignal(JSONNode _json)
    {
        return new CanSignal(_json);
    }

    public int Id { get; private set; }
    public string Name { get; private set; }
    public byte[] Value { get; private set; }

    public const int __ID__ = 2026036856;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Value:" + Bright.Common.StringUtil.CollectionToString(Value) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
